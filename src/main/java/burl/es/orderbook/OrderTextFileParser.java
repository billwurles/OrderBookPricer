package burl.es.orderbook;

import burl.es.orderbook.model.OrderBookController;
import burl.es.orderbook.model.exceptions.OrderNotFoundException;
import burl.es.orderbook.model.exceptions.OrderParseException;
import burl.es.orderbook.model.exceptions.UnknownOrderTypeException;
import burl.es.orderbook.model.order.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.ClassPathResource;

import java.io.IOException;
import java.util.Scanner;

@Slf4j
public class OrderTextFileParser {

    public static OrderBookController controller = new OrderBookController();

	/* Parses order strings in the format
	timestamp 	The time when this message was generated by the market, as milliseconds since midnight.
	A 			literal string identifying this as an "Add Order to Book" message.
	order-id 	A unique string that subsequent "Reduce Order" messages will use to modify this order.
	side 		A 'B' if this is a buy order (a bid), and a 'S' if this is a sell order (an ask).
	price 		The limit price of this order.
	size 		The size in shares of this order, when it was initially sent to the market by some stock trader.

	28800538 A b S 44.26 100
    28812071 R f 157
 */

    public static void main(String[] args) throws IOException, OrderParseException {
        readOrdersFromFile();
//        log.debug("getOrderById max execution time \t hash: {}ns \tbinary: {}ns",controller.maxHashTime ,controller.maxBubbleTime);

//        insertOrderToBook("1400000 A a B 30 300");
//        insertOrderToBook("1500000 A b B 31 30");
//        insertOrderToBook("1400000 A c S 29 30");
//        insertOrderToBook("1700000 A d S 28 30");
//        insertOrderToBook("1100000 A e S 31 30");
    }

    public static void readOrdersFromFile() {
        try{
            Scanner scan = new Scanner(new ClassPathResource("price_data_short.txt").getFile());
            try {
                while(scan.hasNext()){
                    insertOrderToBook(scan.nextLine());
                }
            } catch (OrderNotFoundException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void insertOrderToBook(String order) throws OrderParseException, OrderNotFoundException {
        String[] parts = order.split(" ");
        switch (parts[1]){
            case "A":
//                log.debug("Adding order {}", order);
                controller.addOrder(new OrderSnapshot(Long.parseLong(parts[0]), parts[2], parseOrderSide(parts[3]), parts[4], parts[5]));
                break;
            case "R":
//                log.debug("Reducing order {}", order);
                controller.reduceOrder(new ReduceSnapshot(Long.parseLong(parts[0]), parts[2], parts[3]));
                break;
        }
    }

    private static Side parseOrderSide(String side) throws UnknownOrderTypeException {
        return switch (side) {
            case "B" -> Side.BUY;
            case "S" -> Side.SELL;
            default -> throw new UnknownOrderTypeException("Unknown A Type '" + side + "'");
        };
    }
}
